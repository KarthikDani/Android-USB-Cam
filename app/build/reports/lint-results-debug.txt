/home/karthik/Android-USB-Cam/app/src/main/AndroidManifest.xml:13: Warning: WRITE_EXTERNAL_STORAGE is deprecated (and is not granted) when targeting Android 13+. If you need to write to shared storage, use the MediaStore.createWriteRequest intent. [ScopedStorage]
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/AndroidManifest.xml:14: Warning: READ_EXTERNAL_STORAGE is deprecated (and is not granted) when targeting Android 13+. If you need to query or interact with MediaStore or media files on the shared storage, you should instead use one or more new storage permissions: READ_MEDIA_IMAGES, READ_MEDIA_VIDEO or READ_MEDIA_AUDIO. [ScopedStorage]
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   As of Android 13, if you need to query or interact with MediaStore or media
   files on the shared storage, you should be using instead one or more new
   storage permissions:
   * android.permission.READ_MEDIA_IMAGES
   * android.permission.READ_MEDIA_VIDEO
   * android.permission.READ_MEDIA_AUDIO

   and then add maxSdkVersion="33" to the older permission. See the developer
   guide for how to do this:
   https://developer.android.com/about/versions/13/behavior-changes-13#granula
   r-media-permissions

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/home/karthik/Android-USB-Cam/app/build.gradle:13: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 34
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/home/karthik/Android-USB-Cam/app/build.gradle:39: Warning: A newer version of androidx.core:core-ktx than 1.12.0 is available: 1.17.0 [GradleDependency]
    implementation 'androidx.core:core-ktx:1.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:40: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.1 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:41: Warning: A newer version of com.google.android.material:material than 1.11.0 is available: 1.12.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.11.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:42: Warning: A newer version of androidx.activity:activity than 1.8.2 is available: 1.10.1 [GradleDependency]
    implementation 'androidx.activity:activity:1.8.2'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:43: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:48: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.3.0 [GradleDependency]
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:49: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.7.0 [GradleDependency]
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:2: Warning: A newer version of com.android.application than 8.2.0 is available: 8.12.1 [GradleDependency]
agp = "8.2.0"
      ~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:4: Warning: A newer version of androidx.core:core-ktx than 1.12.0 is available: 1.17.0 [GradleDependency]
coreKtx = "1.12.0"
          ~~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:6: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.3.0 [GradleDependency]
junitVersion = "1.1.5"
               ~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:7: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.7.0 [GradleDependency]
espressoCore = "3.5.1"
               ~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:8: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.1 [GradleDependency]
appcompat = "1.6.1"
            ~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:9: Warning: A newer version of com.google.android.material:material than 1.11.0 is available: 1.12.0 [GradleDependency]
material = "1.11.0"
           ~~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:10: Warning: A newer version of androidx.activity:activity than 1.8.2 is available: 1.10.1 [GradleDependency]
activity = "1.8.2"
           ~~~~~~~
/home/karthik/Android-USB-Cam/gradle/libs.versions.toml:11: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
constraintlayout = "2.1.4"
                   ~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/home/karthik/Android-USB-Cam/app/src/main/res/layout/activity_main.xml:7: Warning: Possible overdraw: Root element paints background #2B2B2B with a theme that also paints a background (inferred theme is @style/Theme_USBCamApp) [Overdraw]
    android:background="#2B2B2B"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/home/karthik/Android-USB-Cam/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/res/values/strings.xml:5: Warning: The resource R.string.request_permission appears to be unused [UnusedResources]
    <string name="request_permission">Request USB Permission</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/home/karthik/Android-USB-Cam/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/home/karthik/Android-USB-Cam/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml:2: Warning: The application adaptive roundIcon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/home/karthik/Android-USB-Cam/app/src/main/res/layout/activity_main.xml:38: Warning: Buttons in button bars should be borderless; use style="?android:attr/buttonBarButtonStyle" (and ?android:attr/buttonBarStyle on the parent) [ButtonStyle]
        <Button
         ~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/res/layout/activity_main.xml:48: Warning: Buttons in button bars should be borderless; use style="?android:attr/buttonBarButtonStyle" (and ?android:attr/buttonBarStyle on the parent) [ButtonStyle]
        <Button
         ~~~~~~

   Explanation for issues of type "ButtonStyle":
   Button bars typically use a borderless style for the buttons. Set the
   style="?android:attr/buttonBarButtonStyle" attribute on each of the
   buttons, and set style="?android:attr/buttonBarStyle" on the parent layout

   https://d.android.com/r/studio-ui/designer/material/dialogs

/home/karthik/Android-USB-Cam/app/build.gradle:42: Information: Add suffix -ktx to enable the Kotlin extensions for this library [KtxExtensionAvailable]
    implementation 'androidx.activity:activity:1.8.2'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KtxExtensionAvailable":
   Android KTX extensions augment some libraries with support for modern
   Kotlin language features like extension functions, extension properties,
   lambdas, named parameters, coroutines, and more.

   In Kotlin projects, use the KTX version of a library by replacing the
   dependency in your build.gradle file. For example, you can replace
   androidx.fragment:fragment with androidx.fragment:fragment-ktx.

   https://developer.android.com/kotlin/ktx

/home/karthik/Android-USB-Cam/app/build.gradle:39: Warning: Use the existing version catalog reference (libs.androidx.core.ktx) instead [UseTomlInstead]
    implementation 'androidx.core:core-ktx:1.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:40: Warning: Use the existing version catalog reference (libs.androidx.appcompat) instead [UseTomlInstead]
    implementation 'androidx.appcompat:appcompat:1.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:41: Warning: Use the existing version catalog reference (libs.material) instead [UseTomlInstead]
    implementation 'com.google.android.material:material:1.11.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:42: Warning: Use the existing version catalog reference (libs.androidx.activity) instead [UseTomlInstead]
    implementation 'androidx.activity:activity:1.8.2'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:43: Warning: Use the existing version catalog reference (libs.androidx.constraintlayout) instead [UseTomlInstead]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:47: Warning: Use the existing version catalog reference (libs.junit) instead [UseTomlInstead]
    testImplementation 'junit:junit:4.13.2'
                       ~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:48: Warning: Use the existing version catalog reference (libs.androidx.junit) instead [UseTomlInstead]
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/build.gradle:49: Warning: Use the existing version catalog reference (libs.androidx.espresso.core) instead [UseTomlInstead]
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseTomlInstead":
   If your project is using a libs.versions.toml file, you should place all
   Gradle dependencies in the TOML file. This lint check looks for version
   declarations outside of the TOML file and suggests moving them (and in the
   IDE, provides a quickfix to performing the operation automatically).

/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:67: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    statusText.text = "Streaming started"
                                       ~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:78: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                statusText.text = "Streaming stopped"
                                   ~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:124: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
        statusText.text = "Camera disconnected"
                           ~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:132: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                statusText.text = "Camera initialized, starting stream..."
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:141: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    statusText.text = "Streaming started"
                                       ~~~~~~~~~~~~~~~~~
/home/karthik/Android-USB-Cam/app/src/main/java/com/example/usbcamapp/MainActivity.kt:144: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                statusText.text = "Failed to initialize camera"
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "SetTextI18n":
   When calling TextView#setText
   * Never call Number#toString() to format numbers; it will not handle
   fraction separators and locale-specific digits properly. Consider using
   String#format with proper format specifications (%d or %f) instead.
   * Do not pass a string literal (e.g. "Hello") to display text. Hardcoded
   text can not be properly translated to other languages. Consider using
   Android resource strings instead.
   * Do not build messages by concatenating text chunks. Such messages can not
   be properly translated.

   https://developer.android.com/guide/topics/resources/localization.html

/home/karthik/Android-USB-Cam/app/src/main/res/layout/activity_main.xml:55: Warning: Hardcoded string "Disconnect", should use @string resource [HardcodedText]
            android:text="Disconnect"
            ~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 40 warnings
